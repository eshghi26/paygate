pipeline{
    agent any

    environment {
        CONTAINER_NAME = 'paygaterediscont'
        DOCKERHUB_CREDENTIALS = 'paygatedockerhub'
        DOCKERHUB_REPO = 'paygateproj/paygateredis'
        DOCKERFILE_PATH = 'Redis/Dockerfile'
        DB_VOLUME_NAME = "redisdb_data"
        REDIS_PASS = 'Systemmige1'
    }

    stages {
        stage('Fetch Code') {
            steps {
                git url: 'https://gitlab.com/rezadoodangi/paymentgateway.git',
                branch: 'master',
                credentialsId: 'paygatetesttoken'
            }
        }

        stage('Build Docker Image'){
            steps {
                script {
                    dockerImage = docker.build( "$DOCKERHUB_REPO:V$BUILD_NUMBER", "-f $DOCKERFILE_PATH .")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', DOCKERHUB_CREDENTIALS) {
                        dockerImage.push("V$BUILD_NUMBER")
                    }
                }
            }
        }

        stage('Delete Previous Container') {
            steps {
                script {
                    // Check if the container exists and stop it if running
                    sh """
                    if [ \$(docker ps -a -q -f name=$CONTAINER_NAME) ]; then
                        echo "Stopping and removing existing container..."
                        docker stop $CONTAINER_NAME || true
                        docker rm $CONTAINER_NAME || true
                    else
                        echo "No previous container found."
                    fi
                    """
                }
            }
        }

        stage('Deploy Latest Container') {
            steps {
                script {
                    // Run the PostgreSQL container with the declared volume
                    sh """
                    docker run -d \
                        --name $CONTAINER_NAME \
                        -v ${DB_VOLUME_NAME}:/data \
                        -p 0.0.0.0:9736:6379 \
                        ${DOCKERHUB_REPO}:V$BUILD_NUMBER \
                        --requirepass $REDIS_PASS
                    """
                }
            }
        }

        stage('Delete Previous Images from Jenkins') {
            steps {
                script {
                    // Define the regular expression pattern for image names, excluding the current build's image
                    def imagePattern = "^${DOCKERHUB_REPO}.*"
                    def currentImage = "${DOCKERHUB_REPO}:V$BUILD_NUMBER"

                    // Find and remove all images matching the pattern, but exclude the current build's image
                    sh """
                    docker images --format "{{.Repository}}:{{.Tag}}" | grep "${imagePattern}" | grep -v "${currentImage}" | xargs -r docker rmi -f
                    """
                }
            }
        }

    }

}
