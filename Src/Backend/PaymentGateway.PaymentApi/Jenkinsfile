pipeline{
    agent any

    environment {
        CONTAINER_NAME = "paygatepayapicont"
        DOCKERHUB_CREDENTIALS = 'dockerhubcred'
        DOCKERHUB_REPO = 'paygateproj/paygatepayapi'
        DOCKERFILE_PATH = 'Src/Backend/PaymentGateway.PaymentApi/Dockerfile'
    }

    stages {
        stage('Wait for All Dependent Containers to be Running') {
            steps {
                script {
                    // List of container names or IDs to check
                    def containers = ['paygatepostgrescont', 'paygaterediscont']

                    // Define a timeout in seconds for waiting
                    def timeoutSeconds = 300 // 5 minutes

                    // Time in seconds between checks
                    def checkInterval = 5

                    // Check if all containers are running
                    def allContainersRunning = false
                    def elapsedSeconds = 0

                    while (!allContainersRunning && elapsedSeconds < timeoutSeconds) {
                        allContainersRunning = true // Assume all are running at first

                        // Loop through each container to check its status
                        for (container in containers) {
                            def result = sh(
                                script: "docker inspect -f '{{.State.Running}}' ${container} || echo 'false'",
                                returnStdout: true
                            ).trim()

                            if (result != 'true') {
                                echo "Container ${container} is not running yet."
                                allContainersRunning = false // If any container is not running, set to false
                                break
                            }
                        }

                        if (!allContainersRunning) {
                            echo "Waiting for all containers to start..."
                            sleep(checkInterval)
                            elapsedSeconds += checkInterval
                        }
                    }

                    // If not all containers are running after the timeout, fail the build
                    if (!allContainersRunning) {
                        error "One or more containers failed to start within the timeout period."
                    } else {
                        echo "All containers are running."
                    }
                }
            }
        }

        stage('Fetch Code') {
            steps {
                git url: 'git@gitlab.com:rezadoodangi/paymentgateway.git',
                branch: 'master',
                credentialsId: 'mygithubpk'
            }
        }

        stage('Build Docker Image'){
            steps {
                script {
                    dockerImage = docker.build("$DOCKERHUB_REPO:V$BUILD_NUMBER", "-f $DOCKERFILE_PATH .")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', DOCKERHUB_CREDENTIALS) {
                        dockerImage.push("V$BUILD_NUMBER")
                    }
                }
            }
        }

        stage('Delete Previous Container') {
            steps {
                script {
                    // Check if the container exists and stop it if running
                    sh """
                    if [ \$(docker ps -a -q -f name=$CONTAINER_NAME) ]; then
                        echo "Stopping and removing existing container..."
                        docker stop $CONTAINER_NAME || true
                        docker rm $CONTAINER_NAME || true
                    else
                        echo "No previous container found."
                    fi
                    """
                }
            }
        }

        stage('Deploy Latest Container') {
            steps {
                script {
                    sh """
                    docker run -d \
                        --name $CONTAINER_NAME \
                        -e ASPNETCORE_ENVIRONMENT=Development \
                        -e ASPNETCORE_HTTP_PORTS=8080 \
                        -p 0.0.0.0:5052:8080 \
                        ${DOCKERHUB_REPO}:V$BUILD_NUMBER
                    """
                }
            }
        }

        stage('Delete Previous Images from Jenkins') {
            steps {
                script {
                    // Define the regular expression pattern for image names, excluding the current build's image
                    def imagePattern = "^${DOCKERHUB_REPO}.*"
                    def currentImage = "${DOCKERHUB_REPO}:V$BUILD_NUMBER"

                    // Find and remove all images matching the pattern, but exclude the current build's image
                    sh """
                    docker images --format "{{.Repository}}:{{.Tag}}" | grep "${imagePattern}" | grep -v "${currentImage}" | xargs -r docker rmi -f
                    """
                }
            }
        }
    }

}
