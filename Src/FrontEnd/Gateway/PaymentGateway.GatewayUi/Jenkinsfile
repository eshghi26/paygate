pipeline{
    agent any

    environment {
        CONTAINER_NAME = "paymentuicont"
        DOCKERHUB_CREDENTIALS = 'dockerhubcred'
        DOCKERHUB_REPO = 'eshghi26/paygateui'
    }

    stages {
        stage('Fetch Code') {
            steps {
                git url: 'git@github.com:eshghi26/paygate.git',
                branch: 'main',
                credentialsId: 'mygitubpk'
            }
        }

        stage('Build Docker Image'){
            steps {
                script {
                    dockerImage = docker.build("$DOCKERHUB_REPO:V$BUILD_NUMBER", "-f Src/FrontEnd/Gateway/PaymentGateway.GatewayUi/Dockerfile .")
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', DOCKERHUB_CREDENTIALS) {
                        dockerImage.push("V$BUILD_NUMBER")
                    }
                }
            }
        }

        stage('Delete Previous Container') {
            steps {
                script {
                    // Check if the container exists and stop it if running
                    sh """
                    if [ \$(docker ps -a -q -f name=$CONTAINER_NAME) ]; then
                        echo "Stopping and removing existing container..."
                        docker stop $CONTAINER_NAME || true
                        docker rm $CONTAINER_NAME || true
                    else
                        echo "No previous container found."
                    fi
                    """
                }
            }
        }

        stage('Deploy Latest Container') {
            steps {
                sh "docker run --name $CONTAINER_NAME -dp 0.0.0.0:6061:8080 ${DOCKERHUB_REPO}:V$BUILD_NUMBER"
            }
        }

        stage('Delete Previous Images from Jenkins') {
            steps {
                script {
                    // Define the regular expression pattern for image names, excluding the current build's image
                    def imagePattern = "^${DOCKERHUB_REPO}.*"
                    def currentImage = "${DOCKERHUB_REPO}:V$BUILD_NUMBER"

                    // Find and remove all images matching the pattern, but exclude the current build's image
                    sh """
                    docker images --format "{{.Repository}}:{{.Tag}}" | grep "${imagePattern}" | grep -v "${currentImage}" | xargs -r docker rmi -f
                    """
                }
            }
        }
    }

}
